If you know the number of elements you want in a vector (instead of the spacing between each element), you can use the linspace function.
linspace(first,last,number_of_elements)

Note the use of commas (,) to separate inputs to the linspace function.
x = linspace(0,1,5)
x = 
    0    0.250    0.500    0.750    1.000



MATLAB contains many functions that create commonly used matrices, such as matrices of random numbers.
x = rand(2)
x = 
    0.8147    0.1270
    0.9058    0.9134
The 2 in the function call rand(2) specifies that the function creates a 2-by-2 matrix of random numbers.


Many matrix creation functions allow you to input one number to create a square matrix (n-by-n) or input two numbers to create a rectangular matrix (m-by-n).
x = rand(2)
x = 
    0.8147    0.1270
    0.9058    0.9134

x = rand(2,3)
x = 
    0.6324    0.2785    0.9575
    0.0975    0.5469    0.9649



Most array creation functions accept the same inputs as rand. For example, the zeros and ones functions create matrices of all zeros and all ones, respectively.
x = ones(2,3)
x = 
    1    1    1
    1    1    1



You can extract values from an array using row-column indexing.
y = A(5,7)
This syntax extracts the value in the 5th row and 7th column of A and assigns the result to the variable y.



You can use the MATLAB keyword end as either a row or column index to reference the last element.
y = A(end,2)


You can use arithmetic with the keyword end. For example:
y = A(end-1,end-2)


To index into a vector, use a single index value. For example, this code returns the third element of row or column vector v.
x = v(3)
Task



Remember, you can extract entire columns of arrays by using the : operator.


MATLAB is designed to work naturally with arrays. For example, you can add a scalar value to all the elements of an array.
x = [1 2 3];
y = x + 2
y = 
     3     4     5



You can apply basic statistical functions in MATLAB to a vector to produce a single output. For example, the maximum value of a vector can be determined using the max function.
xMax = max(x)



The * operator performs matrix multiplication. So, if you use * to multiply two equally sized vectors, you get an error message because the inner dimensions do not agree.
z = [3 4] * [10 20]
Error using  * 
Incorrect dimensions for matrix 
multiplication. 

The .* operator performs element-wise multiplication by multiplying the corresponding elements of two equally sized arrays.
z = [3 4] .* [10 20]
z = 
    30    80




You can apply the size function to a vector or matrix to produce a single output variable containing the array size in a two-element row vector. The first element is the number of rows and the second element is the number of columns.
s = size(x)


You can also request two output variables from the size function. In this case, each variable contains the size of one of the dimensions of the input array. Use square brackets ([ ]) to request more than one output.
[xrow,xcol] = size(x)



Create a matrix named x that:
Contains random integers in the range from 1 to 20
Has 5 rows
Has 7 columns
x = randi(20,5,7)


Notice that each plot command created a separate plot. You can plot one line on top of another in the same axes by using the hold on command.
plot(x1,y1)
hold on
plot(x2,y2)


While the hold state is on, plots continue to appear on the same axes. To return to the default plot behavior, where each plot appears on its own axes, enter hold off.

When you plot a single vector by itself, MATLAB uses the vector values as the y-axis data and sets the x-axis data to the range of 1 to n (the number of elements in the vector).
plot(y)


When you use the plot function, you can optionally set properties using one or more name-value arguments, which consist of an argument name and an associated value. For example, this command plots a heavy line.
plot(y,LineWidth=5)


You can compare an array to a single scalar value using relational operators. The result is a logical array of the same size as the original array.
[5 10 15] > 12
ans = 
    0    0    1




